#+TITLE: My Emacs configuration
#+STARTUP: showeverything
#+PROPERTY: header-args:emacs-lisp :tangle yes

* Emacs Config
** Initialization
#+begin_src emacs-lisp
(package-initialize)
#+end_src

*** Customize output file
I don't want stuff added by Customize to show up in =init.el=.

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
     (load custom-file :noerror))
#+end_src

*** Add package repos
#+begin_src emacs-lisp
;; Adds melpa and org mode repos unless already defined
(unless (assoc-default "melpa" package-archives)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))
(unless (assoc-default "org" package-archives)
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t))
#+end_src

Use =M-x package-refresh-contents= to reload the list of packages
after adding these for the first time.

*** Set up automatic package installation
#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(setq use-package-verbose t)
(setq use-package-always-ensure t)
(require 'use-package)

;; Don't use outdated elisp bytecode
(use-package auto-compile
  :config (auto-compile-on-load-mode)
          (setq load-prefer-newer t))
#+end_src

*** Config utility packages
Gives me the ability to easily rebind keys and hide minor modes from
the modeline.

#+begin_src emacs-lisp
(use-package bind-key)
(use-package diminish)
#+end_src

** General Configuration
=better-defaults= takes care of the majority of Emacs' papercuts.

#+begin_src emacs-lisp
(use-package better-defaults)
#+end_src

*** General Behavior
**** Splash Screen
Don't display the "Welcome to Emacs" stuff

#+begin_src emacs-lisp
(setq inhibit-startup-screen t)
#+end_src

**** Backups
By default, Emacs saves backup files in the current directory. These
are the files ending in =~= that are cluttering up your directory
lists. The following code stashes them all in =~/.emacs.d/backups=,
where I can find them with =C-x C-f= (=find-file=) if I really need
to.

#+begin_src emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+end_src

**** Helm
Helm makes it easy to complete various things.

#+begin_src emacs-lisp
(use-package helm
  :diminish helm-mode)
(helm-mode 1)

(global-set-key "\C-x\C-f" 'helm-find-files)
(global-set-key "\M-x" 'helm-M-x)

(ido-mode -1) ;; Turn off ido mode in case I enabled it accidentally
#+end_src

**** Delete trailing whitespace
#+begin_src emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

**** Change "yes or no" to "y or n"
Lazy people like me never want to type "yes" when "y" will suffice.

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

**** Line numbers
As of Emacs 26, =linum-mode= is deprecated, to be replaced with
=display-line-numbers-mode=.

#+begin_src emacs-lisp
(when (< emacs-major-version 26)
  (global-linum-mode))

(when (>= emacs-major-version 26)
  (global-display-line-numbers-mode)
  (global-linum-mode -1))
#+end_src

**** Automatically follow symlinks
This is especially helpful when you use symlinks to manage your
configuration files, as I do.

#+begin_src emacs-lisp
(setq vc-follow-symlinks t)
#+end_src

*** Appearance
**** Mode line format
Display a more compact mode line.

#+begin_src emacs-lisp
(use-package smart-mode-line
  :config (setq sml/theme 'respectful)
          (smart-mode-line-enable))
#+end_src

When using =emacs --daemon=, you may have to launch an actual instance
of =emacs= (i.e, /not/ =emacsclient=) in order to correctly enable the
new mode line theme.

**** Color scheme
Don't forget to use Oomox (AUR: =oomox=, =oomox-git=) to set your
systemwide icons and GTK+ themes to a matching color scheme.

#+begin_src emacs-lisp
(use-package base16-theme
  :config (load-theme 'base16-gruvbox-dark-hard t))
#+end_src

Again, you may have to launch an actual =emacs= instance in order to
enable this theme for the first time.

**** Time in the modeline
#+begin_src emacs-lisp
(display-time-mode 1)
#+end_src

**** Whitespace Mode
(add-hook 'prog-mode-hook 'whitespace-mode)
#+end_src

**** Magit
#+begin_src emacs-lisp
(use-package magit
  :config (bind-key "C-x g" 'magit-status))
#+end_src

*** Basic Editing
**** Unfilling
It's a little strange that you can't readily undo =M-x
fill-paragraph=. This command binds =M-Q= to be the inverse of =M-q=.

#+begin_src emacs-lisp
(defun my/unfill-paragraph (&optional region)
    "Take a multi-line paragraph and make it into a single line of text."
    (interactive (progn (barf-if-buffer-read-only) (list t)))
    (let ((fill-column (point-max))) (fill-paragraph nil region)))
(bind-key "M-Q" 'my/unfill-paragraph)
#+end_src

*** Programming/Markup Languages
**** LaTeX
#+begin_src emacs-lisp
(use-package tex-mode
  :ensure auctex)
#+end_src

**** Markdown
#+begin_src emacs-lisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+end_src

**** Flycheck
Prefer the slightly-nicer =flycheck= to =flymake=.

#+begin_src emacs-lisp
(use-package flycheck
  :hook (prog-mode . flycheck-mode))
#+end_src

**** Company
Autocompletion framework for Emacs

#+begin_src emacs-lisp
(use-package company
  :hook (prog-mode . company-mode)
  :config (setq company-tooltip-align-annotations t)
          (setq company-minimum-prefix-length 1))
#+end_src

**** Language Server Protocol (LSP)
LSP mode will automatically configure =company-lsp= and
=lsp-ui=. Prefer =flycheck= to the older =flymake=.

#+begin_src emacs-lisp
(use-package lsp-mode
  :commands lsp
  :config (setq lsp-prefer-flymake nil)
          (setq lsp-auto-configure t))

(use-package lsp-ui
  :commands lsp-ui-mode)
(use-package company-lsp
  :commands company-lsp)
#+end_src

**** Bash
***** Arch Linux PKGBUILDS
A =PKGBUILD= should be treated like a shell script.

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("PKGBUILD\\'" . shell-script-mode))
#+end_src

**** TOML
#+begin_src emacs-lisp
(use-package toml-mode)
#+end_src

**** Rust
Run =rustup update stable= and =rustup component add rls rust-analysis
rust-src rustfmt=.

#+begin_src emacs-lisp
(use-package rust-mode
  :hook (rust-mode . lsp))

;; Add keybindings for interacting with Cargo
(use-package cargo
  :hook (rust-mode . cargo-minor-mode))

(use-package flycheck-rust
  :config (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+end_src

**** MIPS Assembly
#+begin_src emacs-lisp
(use-package mips-mode
  :mode "\\.mips$")
#+end_src

**** x86 Assembly
#+begin_src emacs-lisp
(use-package nasm-mode
  :hook (asm-mode . nasm-mode))
#+end_src

**** LLVM IR
Install =emacs-llvm-mode= from the AUR.

#+begin_src emacs-lisp
(setq load-path
    (cons (expand-file-name "/usr/share/emacs/site-lisp/emacs-llvm-mode") load-path))
(require 'llvm-mode)
#+end_src

*** Org Mode
**** Keybindings
#+begin_src emacs-lisp
(bind-key "C-c a" 'org-agenda)
(bind-key "C-c c" 'org-capture)
#+end_src

**** Settings
#+begin_src emacs-lisp
;; Agenda file location: my =$XDG_DOCUMENTS_DIR=
(setq org-agenda-files '("~/documents/"))

;; Include general recurring info (holidays, etc.) in Agenda
(setq org-agenda-include-diary t)

;; Show days that don't have anything scheduled on them
(setq org-agenda-show-all-dates t)

;; Don't show tasks as scheduled if they are already shown as a deadline
(setq org-agenda-skip-scheduled-if-deadline-is-shown t)

;; Always open Agenda to replace the current window
(setq org-agenda-window-setup (quote current-window))

;; Hide deadline/scheduled tasks if they're done
(setq org-agenda-skip-deadline-if-done t)
(setq org-agenda-skip-scheduled-if-done t)

;; Begin the agenda view on the current day, not Sunday
(setq org-agenda-start-on-weekday nil)
#+end_src
